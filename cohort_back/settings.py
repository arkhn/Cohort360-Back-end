"""
Django settings for cohort_back project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from urllib.parse import urlparse

from rest_framework.request import Request

from cohort_back.FhirAPi import FhirCountResponse, FhirCohortResponse, FhirValidateResponse

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "secret")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.getenv("DJANGO_DEBUG", 0)))

CORS_ALLOW_ALL_ORIGINS = DEBUG

ALLOWED_HOSTS = [urlparse(url).netloc for url in os.getenv("DJANGO_ALLOWED_HOSTS", "").split(" ")]
CORS_ALLOWED_ORIGINS = os.getenv("DJANGO_CORS_ALLOWED_ORIGINS", "http://localhost http://127.0.0.1").split(" ")

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    # "mozilla_django_oidc",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_filters",
    "rest_framework",
    "rest_framework_swagger",
    "corsheaders",
    "cohort.apps.CohortConfig",
    "explorations",
    "voting",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "mozilla_django_oidc.middleware.SessionRefresh",
]

AUTHENTICATION_BACKENDS = [
    # "mozilla_django_oidc.auth.OIDCAuthenticationBackend",
    # "cohort.backends.AuthBackend",
]

# OIDC_RP_CLIENT_ID = os.getenv("OIDC_RP_CLIENT_ID")
# OIDC_RP_CLIENT_SECRET = os.getenv("OIDC_RP_CLIENT_SECRET")
# OIDC_OP_AUTHORIZATION_ENDPOINT = os.getenv("OIDC_OP_AUTHORIZATION_ENDPOINT")
# OIDC_OP_TOKEN_ENDPOINT = os.getenv("OIDC_OP_TOKEN_ENDPOINT")
# OIDC_OP_USER_ENDPOINT = os.getenv("OIDC_OP_USER_ENDPOINT")
# OIDC_TOKEN_USE_BASIC_AUTH = True
# OIDC_RP_SIGN_ALGO = "RS256"
# OIDC_OP_JWKS_ENDPOINT = os.getenv("OIDC_OP_JWKS_ENDPOINT")
# LOGIN_REDIRECT_URL = os.getenv("LOGIN_REDIRECT_URL")
# LOGOUT_REDIRECT_URL = os.getenv("LOGOUT_REDIRECT_URL")

ROOT_URLCONF = "cohort_back.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "cohort_back.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB", "cohort"),
        "USER": os.getenv("POSTGRES_USER", "postgres"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", "password"),
        "HOST": os.getenv("POSTGRES_HOST", "db"),
        "PORT": os.getenv("POSTGRES_PORT", 5432),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = "/path/to/static/"

AUTH_USER_MODEL = "cohort.User"

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": (
        # "rest_framework.permissions.IsAuthenticated",
        # "cohort.permissions.AllowOptionsAuthentication",
    ),
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # "mozilla_django_oidc.contrib.drf.OIDCAuthentication",
        # "cohort.AuthMiddleware.CustomAuthentication",
        # "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    "PAGE_SIZE": 10,
}

JWT_SERVER_URL = "https://url/"
JWT_SIGNING_KEY = None
JWT_ALGORITHM = "HS256"

SWAGGER_SETTINGS = {
    "LOGOUT_URL": "/accounts/logout/",
}

APPEND_SLASH = False

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
        },
        # "mozilla_django_oidc": {"handlers": ["console"], "level": "DEBUG"},
    },
}

# Celery
CELERY_BROKER_URL = "redis://localhost:6379"
CELERY_RESULT_BACKEND = "redis://localhost:6379"
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_SERIALIZER = "json"

CELERY_BEAT_SCHEDULE = {
    "task-update-cohorts": {"task": "cohort_back.celery.import_i2b2", "schedule": 2},
    "task-update-gitlab-issues": {"task": "cohort_back.celery.update_gitlab_issues", "schedule": 10},
    "get_pending_jobs_status": {"task": "cohort_back.celery.get_pending_jobs_status", "schedule": 5},
}

PG_OMOP_URL = "ip"
PG_OMOP_DBNAME = "name"
PG_OMOP_SCHEMA = "name"
PG_OMOP_USER = "user"
PG_OMOP_PASS = "password"

VOTING_GITLAB = {
    "enable": True,
    "api_url": "https://gitlab.com/api/v4",
    "project_id": "490",
    "project_name": "cohort360%2Fuser_requests",
    "gitlab_private_token": "xxxx",
    "authorized_labels": ["To Do", "Doing", "Feature request", "Bug request"],
    "post_labels": ["Bug request", "Feature request"],
}


# called to format a json query stored in RequestQuerySnapshot to the format read by Fhir API
def format_json_request(json_req: str) -> str:
    raise NotImplementedError()


# called when a request is about to be made to external Fhir API
def get_fhir_authorization_header(request: Request) -> dict:
    raise NotImplementedError()


# called to ask a Fhir API to compute the size of a cohort given the request in the json_file
def post_count_cohort(json_file: str, auth_headers) -> FhirCountResponse:
    raise NotImplementedError()


# called to ask a Fhir API to create a cohort given the request in the json_file
def post_create_cohort(json_file: str, auth_headers) -> FhirCohortResponse:
    raise NotImplementedError()


# called to ask a Fhir API to validate the format of the json_file
def post_validate_cohort(json_file: str, auth_headers) -> FhirValidateResponse:
    raise NotImplementedError()
